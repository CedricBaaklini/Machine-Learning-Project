import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import pairwise_kernels

#Directory
os.chdir(r"C:\Users\jnell\Downloads\Mall_Customers")

mall_customer_data = pd.read_csv("Mall_Customers.csv")
mall_customer_data = pd.get_dummies(mall_customer_data, drop_first=True)
mall_customer_data = mall_customer_data.ffill()

print("Data shape:", mall_customer_data.shape)

#Similarity Matrix
similarity = pairwise_kernels(mall_customer_data, metric="rbf", gamma=0.001)

#Normalization
d = similarity.sum(axis=1)
D_inv_sqrt = np.diag(1.0 / np.sqrt(d + 1e-12))
L_sym = np.eye(similarity.shape[0]) - D_inv_sqrt @ similarity @ D_inv_sqrt

#Eigen decomp
eigvals, eigvecs = np.linalg.eigh(L_sym)
eigvals = np.sort(eigvals)

#Gaps
gaps = np.diff(eigvals)

#First 20 vals
print("n\First 20 eigenvalues:")
for i, val in enumerate(eigvals[:20], start=1):
print(f"Eigenvalue {i}: {val}")

#first top 10 gaps
top_n = 10
sorted_indices = np.argsort(gaps)[::-1][:top_n]
print(f"\nTop {top_n} eigengaps:")
for idx in sorted_indices:
print(f"Gap at index {idx+1} (between eigenvalue {idx+1} and {idx+2}): {gaps[idx]}")

#k
k = sorted_indices[0] + 1
print("\nSuggested number of clusters (Eigengap Heuristic):", k)

#Plt
plt.figure(figsize=(12,5))

#Vals
plt.subplot(1,2,1)
plt.plot(range(1, len(eigvals)+1), eigvals, marker='o')
plt.axvline(k, color='red', linestyle='--', label=f'suggested k={k}')
plt.xlabel("Index")
plt.ylabel("Eigenvalue"
plt.title("Eigenvalues of Normalized Laplacian")
plt.legend()

#Gaps
plt.subplot(1,2,2)
plt.plot(range(1, len(gaps)+1), gaps, marker='o', color='orange')
plt.axvline(k, color='red', linestyle='--')
plt.xlabel("Index (gap between i and i+1)")
plt.ylabel("Gap size")
plt.title("Eigengaps (look for biggest spike)")

plt.tight_layout()
plt.show()
plt.close()




